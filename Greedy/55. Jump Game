class Solution {
    public boolean canJump(int[] nums) {
        int n = nums.length;
        int reached = n - 1;
         for(int i = n-2; i >= 0; --i){
            if(i + nums[i] >= reached){
                reached = i;
            }
        }
        return reached == 0;
    }
//  // Recursion approch
    // public boolean canJump(int[] nums) {
    //     return JumpStep (0, nums);
    // }
    // public boolean JumpStep(int i , int[] nums){
    //     if(i >= nums.length - 1){
    //         return true;
    //     }
    //     // int maxjump = nums[position];
    //     // for(int j = 1; j <= maxjump; j++){
    //     //     if(JumpStep(position + j, nums)){
    //     //         return true;
    //     //     }
    //     // }
    //     boolean reached = false;
    //     for(int j = (i + 1); j <= nums[i] + i; ++j){
    //         reached |= JumpStep(j, nums);
    //     }
    //     return reached;
    // }
}
